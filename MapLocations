import folium
import pandas as p
import json
import pickle

'''DATA EXPLANATION:

{
  'images': [image],
  'detection_categories': {'1': 'animal', '2': 'person', '3': 'vehicle'},
  'info': info
}

image {
  'file': str,
  'max_detection_conf': float,
  'detections': [detection]
}

detection {
  # Bounding boxes are in normalized, floating-point coordinates, with the origin at the upper-left.
  'bbox' : [x, y, width, height], 
  # Note that the categories returned by the detector are not the categories in the WCS dataset.
  'category': str,
  'conf': float
}

'''

# focus on Kenya:
coordinates_kenya = [-0.023559, 37.906193]
coord1 = [5.387439, 33.734457]
coord2 = [-5.169978, 43.630227]

# initialize folium maps
m = folium.Map(tiles="cartodb positron")
m_test = folium.Map(tiles="cartodb positron")
m_kenya = folium.Map(location=coordinates_kenya,zoom_start=3, tiles="cartodb positron")

# file names
gps_locations = 'gps_locations.json'
test_images_info = 'iwildcam2022_test_information.json'

# format test information to dataframe using pandas:
with open(test_images_info) as data_file:    
    data = json.load(data_file) 
df_test = p.json_normalize(data, 'images')

# get a list of unique locations in this dataframe
locations =  set(df_test.loc[:, 'location'].values.tolist())
# Make a list to store all camera locations in kenya
locations_kenya = [] # [29, 46, 48, 59, 69, 98, 118, 120, 134, 139, 150, 191, 207, 215, 222, 252, 255, 277, 305, 317, 352, 355, 358, 368, 430, 435, 454, 455, 467, 483]

def loc_to_coord(locations, file,map_f):
    # make dataframe of the locations and corresponding gps coordinates
    dataframe = p.read_json(file).transpose()

    # for some reason not all image locations are actually presented in the gps locations file
    try:
        location = dataframe.loc[int(locations)]
        lat, lon = location['latitude'], location['longitude']
        folium.Marker(location=[lat,lon]).add_to(map_f)

        # add to kenya map
        if coord2[0] < lat < coord1[0] and coord1[1] < lon < coord2[1]:
            folium.Marker(location=[lat,lon]).add_to(m_kenya)
            locations_kenya.append(int(locations))

    except:
        return

def show_all_locs(file):
    '''Given a gps locations file, it will display all locations on the 'm'-map '''
    df = p.read_json(file).transpose()
    for ind in df.index:
        lat, lon = df['latitude'][ind], df['longitude'][ind]
        folium.Marker(location=[lat,lon]).add_to(m)

# show_all_locs(gps_locations)
def show_kenya():
    for location in locations:
        loc_to_coord(location,gps_locations, m_test)
show_kenya()
# print(locations_kenya)
def generate_kenya_df(source_ims, location_list, file):
    df = p.read_json(file).transpose()

    with open(source_ims) as data_file:    
      data = json.load(data_file) 
    df_test = p.json_normalize(data, 'images')
    print(df_test.info())

    df_kenya = df_test[df_test['location'].isin(location_list)].copy()
    return df_kenya




df_kenya = generate_kenya_df(test_images_info, locations_kenya, gps_locations)
df_kenya.to_pickle("./kenya_information.pkl")
print(df_kenya.info())
m.save("footprint.html")
m_test.save('test_locations.html')
m_kenya.save('Kenya.html')
